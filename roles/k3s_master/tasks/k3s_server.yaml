---

- name: Get IPv4 address of the flannel interface
  shell: >-
    ip -4 addr show {{ flannel_iface }} | grep -oP '(?<=inet\s)\d+(\.\d+){3}'
  register: master_ip
  delegate_to: "{{ groups['master'][0] }}"
  changed_when: false

- name: Debug master IP
  debug:
    msg: "{{ master_ip.stdout }}"
  when: master_ip is defined

- name: Set master_ip fact
  set_fact:
    master_ip: "{{ master_ip.stdout }}"
  when: master_ip is defined

# Check if we can retrieve ansible_facts.all_ipv4_addresses from the master node and
# store it in master_ip using the first IP address
- name: Download k3s installation script
  get_url:
    url: https://get.k3s.io
    dest: /tmp/install_k3s.sh
    mode: "u=rwx,g=rx,o=rx"

# show hostvars contents of groups['master'][0]
# - debug:
#     msg: "{{ hostvars[groups['master'][0]] }}"
#   when: inventory_hostname != groups['master'][0]

# - name: Get IPv4 address of the flannel interface
#   set_fact:
#     master_ip: "{{ hostvars[groups['master'][0]].ansible_facts.all_ipv4_addresses[0] }}"
#   delegate_to: "{{ groups['master'][0] }}"
#   run_once: true
#   when: inventory_hostname == groups['master'][0]

# - name: Debug master IP
#   debug:
#     msg: "{{ master_ip }}"
#   when: master_ip is defined


- name: Install k3s server (init-cluster)
  command: /tmp/install_k3s.sh server {{ server_init_args }}
  args:
    chdir: /tmp
  register: k3s_server

- name: Wait for k3s service to be running
  command: systemctl is-active k3s
  register: k3s_status
  retries: 10
  delay: 5
  until: k3s_status.stdout == "active"

# check if current node has joined the cluster
- name: Check if node has joined the cluster
  command: "{{ k3s_binary_path | default('k3s') }} kubectl get nodes -o=jsonpath='{.items[*].metadata.name}'"
  register: nodes
  retries: 10
  delay: 5
  until: nodes.rc == 0 and inventory_hostname in nodes.stdout
  when: inventory_hostname in groups['master']

- name: Create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Replace cluster address with kube-vip address (apiserver_endpoint)
  ansible.builtin.replace:
    path: "~{{ ansible_user }}/.kube/config"
    regexp: '^(\s*server:\s+)https://.*'
    replace: '\1https://{{ apiserver_endpoint }}:6443'
    backup: yes

- name: Wait for node-token
  ansible.builtin.wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Register node-token file access mode
  ansible.builtin.stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: Change file access node-token
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server
    mode: g+rx,o+rx

- name: Read node-token from master
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store Master node-token
  ansible.builtin.set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"
    delegate_to: localhost
  run_once: true

# print current inventory_hostname and value of token | default(k3s_token)
- debug:
    msg: "{{ inventory_hostname }}: {{ hostvars[groups['master'][0]]['token'] | default(k3s_token) }}"

- name: Restore node-token file access
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"
